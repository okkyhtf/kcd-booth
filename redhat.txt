echo "
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: klusterlets.operator.open-cluster-management.io
spec:
  conversion:
    strategy: None
  group: operator.open-cluster-management.io
  names:
    kind: Klusterlet
    listKind: KlusterletList
    plural: klusterlets
    singular: klusterlet
  scope: Cluster
  preserveUnknownFields: false
  versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: Klusterlet represents controllers to install the resources for a managed cluster. When configured, the Klusterlet requires a secret named bootstrap-hub-kubeconfig in the agent namespace to allow API requests to the hub for the registration protocol. In Hosted mode, the Klusterlet requires an additional secret named external-managed-kubeconfig in the agent namespace to allow API requests to the managed cluster for resources installation.
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Spec represents the desired deployment configuration of Klusterlet agent.
              type: object
              properties:
                clusterName:
                  description: ClusterName is the name of the managed cluster to be created on hub. The Klusterlet agent generates a random name if it is not set, or discovers the appropriate cluster name on OpenShift.
                  type: string
                deployOption:
                  description: DeployOption contains the options of deploying a klusterlet
                  type: object
                  properties:
                    mode:
                      description: 'Mode can be Default or Hosted. It is Default mode if not specified In Default mode, all klusterlet related resources are deployed on the managed cluster. In Hosted mode, only crd and configurations are installed on the spoke/managed cluster. Controllers run in another cluster (defined as management-cluster) and connect to the mangaged cluster with the kubeconfig in secret of "external-managed-kubeconfig"(a kubeconfig of managed-cluster with cluster-admin permission). Note: Do not modify the Mode field once it''s applied.'
                      type: string
                externalServerURLs:
                  description: ExternalServerURLs represents the a list of apiserver urls and ca bundles that is accessible externally If it is set empty, managed cluster has no externally accessible url that hub cluster can visit.
                  type: array
                  items:
                    description: ServerURL represents the apiserver url and ca bundle that is accessible externally
                    type: object
                    properties:
                      caBundle:
                        description: CABundle is the ca bundle to connect to apiserver of the managed cluster. System certs are used if it is not set.
                        type: string
                        format: byte
                      url:
                        description: URL is the url of apiserver endpoint of the managed cluster.
                        type: string
                namespace:
                  description: 'Namespace is the namespace to deploy the agent. The namespace must have a prefix of "open-cluster-management-", and if it is not set, the namespace of "open-cluster-management-agent" is used to deploy agent. Note: in Detach mode, this field will be **ignored**, the agent will be deployed to the namespace with the same name as klusterlet.'
                  type: string
                nodePlacement:
                  description: NodePlacement enables explicit control over the scheduling of the deployed pods.
                  type: object
                  properties:
                    nodeSelector:
                      description: NodeSelector defines which Nodes the Pods are scheduled on. The default is an empty list.
                      type: object
                      additionalProperties:
                        type: string
                    tolerations:
                      description: Tolerations is attached by pods to tolerate any taint that matches the triple <key,value,effect> using the matching operator <operator>. The default is an empty list.
                      type: array
                      items:
                        description: The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
                        type: object
                        properties:
                          effect:
                            description: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                            type: string
                          key:
                            description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                            type: string
                          operator:
                            description: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                            type: string
                          tolerationSeconds:
                            description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                            type: integer
                            format: int64
                          value:
                            description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                            type: string
                registrationImagePullSpec:
                  description: RegistrationImagePullSpec represents the desired image configuration of registration agent. quay.io/open-cluster-management.io/registration:latest will be used if unspecified.
                  type: string
                workImagePullSpec:
                  description: WorkImagePullSpec represents the desired image configuration of work agent. quay.io/open-cluster-management.io/work:latest will be used if unspecified.
                  type: string
            status:
              description: Status represents the current status of Klusterlet agent.
              type: object
              properties:
                conditions:
                  description: 'Conditions contain the different condition statuses for this Klusterlet. Valid condition types are: Applied: Components have been applied in the managed cluster. Available: Components in the managed cluster are available and ready to serve. Progressing: Components in the managed cluster are in a transitioning state. Degraded: Components in the managed cluster do not match the desired configuration and only provide degraded service.'
                  type: array
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                    type: object
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        type: string
                        format: date-time
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        type: string
                        maxLength: 32768
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        type: integer
                        format: int64
                        minimum: 0
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        type: string
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        type: string
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                generations:
                  description: Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
                  type: array
                  items:
                    description: GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made. The definition matches the GenerationStatus defined in github.com/openshift/api/v1
                    type: object
                    properties:
                      group:
                        description: group is the group of the resource that you're tracking
                        type: string
                      lastGeneration:
                        description: lastGeneration is the last generation of the resource that controller applies
                        type: integer
                        format: int64
                      name:
                        description: name is the name of the resource that you're tracking
                        type: string
                      namespace:
                        description: namespace is where the resource that you're tracking is
                        type: string
                      resource:
                        description: resource is the resource type of the resource that you're tracking
                        type: string
                      version:
                        description: version is the version of the resource that you're tracking
                        type: string
                observedGeneration:
                  description: ObservedGeneration is the last generation change you've dealt with
                  type: integer
                  format: int64
                relatedResources:
                  description: RelatedResources are used to track the resources that are related to this Klusterlet.
                  type: array
                  items:
                    description: RelatedResourceMeta represents the resource that is managed by an operator
                    type: object
                    properties:
                      group:
                        description: group is the group of the resource that you're tracking
                        type: string
                      name:
                        description: name is the name of the resource that you're tracking
                        type: string
                      namespace:
                        description: namespace is where the thing you're tracking is
                        type: string
                      resource:
                        description: resource is the resource type of the resource that you're tracking
                        type: string
                      version:
                        description: version is the version of the thing you're tracking
                        type: string
      served: true
      storage: true
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
" | base64 -d | kubectl create -f - || test $? -eq 0 && sleep 2 && echo "
---
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    workload.openshift.io/allowed: "management"
  name: "open-cluster-management-agent"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: klusterlet
  namespace: "open-cluster-management-agent"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: klusterlet
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps", "serviceaccounts"]
  verbs: ["create", "get", "list", "update", "watch", "patch", "delete"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["create", "get", "list", "update", "watch", "patch"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["create", "get", "list", "watch","delete"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["", "events.k8s.io"]
  resources: ["events"]
  verbs: ["create", "patch", "update"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["create", "get", "list", "update", "watch", "patch", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterrolebindings", "rolebindings"]
  verbs: ["create", "get", "list", "update", "watch", "patch", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "roles"]
  verbs: ["create", "get", "list", "update", "watch", "patch", "delete", "escalate", "bind"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create", "get", "list", "update", "watch", "patch", "delete"]
- apiGroups: ["operator.open-cluster-management.io"]
  resources: ["klusterlets"]
  verbs: ["get", "list", "watch", "update", "patch", "delete"]
- apiGroups: ["operator.open-cluster-management.io"]
  resources: ["klusterlets/status"]
  verbs: ["update", "patch"]
- apiGroups: ["work.open-cluster-management.io"]
  resources: ["appliedmanifestworks"]
  verbs: ["list", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: open-cluster-management:klusterlet-admin-aggregate-clusterrole
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
- apiGroups: ["operator.open-cluster-management.io"]
  resources: ["klusterlets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: klusterlet
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: klusterlet
subjects:
- kind: ServiceAccount
  name: klusterlet
  namespace: "open-cluster-management-agent"

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: klusterlet
  namespace: "open-cluster-management-agent"
  labels:
    app: klusterlet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: klusterlet
  template:
    metadata:
      annotations:
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
      labels:
        app: klusterlet
    spec:
      serviceAccountName: klusterlet
      tolerations:
      - key: "node-role.kubernetes.io/infra"
        value: ""
        effect: "NoSchedule"
        operator: "Exists"
      containers:
      - name: klusterlet
        image: registry.redhat.io/multicluster-engine/registration-operator-rhel8@sha256:863489fbac4b76a33290a6ae075bb30d4e47afbc0121b6b4474b7300061bdd03
        imagePullPolicy: IfNotPresent
        args:
          - "/registration-operator"
          - "klusterlet"
          - "--disable-leader-election"
        livenessProbe:
          httpGet:
            path: /healthz
            scheme: HTTPS
            port: 8443
          initialDelaySeconds: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            scheme: HTTPS
            port: 8443
          initialDelaySeconds: 2

---
apiVersion: v1
kind: Secret
metadata:
  name: "bootstrap-hub-kubeconfig"
  
  namespace: "open-cluster-management-agent"
  
type: Opaque
data:
  kubeconfig: "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSTmFrTkRRV2h4WjBGM1NVSkJaMGxKUmxKTWFtNVhaMVppUW5OM1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFYZE9la1ZUVFVKQlIwRXhWVVVLUTNoTlNtSXpRbXhpYms1dllWZGFNRTFUUlhkSWQxbEVWbEZSUkVWNGFISmtWMHBzVEZkR2QyRllUbXhqYmxwc1kya3hjMWxwTVhwaFYyUjFXbGhKZHdwSWFHTk9UV3BKZUUxVVNURk5SRVY2VFZSVmQxZG9ZMDVOZWtsNFRWUkplVTFFUlhwTlZGVjNWMnBCTTAxU1NYZEZRVmxFVmxGUlRFVjNiSFpqUjFaMUNtTXlhSEJhYmxGNFNWUkJaa0puVGxaQ1FVMVVSMGQwTVZsdFZYUlpXRUp3WXpKV2VXUnRWbmxNVjNocFRGaE9jRm95Tld4amFrTkRRVk5KZDBSUldVb0tTMjlhU1doMlkwNUJVVVZDUWxGQlJHZG5SVkJCUkVORFFWRnZRMmRuUlVKQlRHcHNPRVpyWlZFeVdYZGxOeXRPWTNobmJtTkdTV2wwWjJWMk1razVlQXB3YVdsb2NDdHRLM2xHVUcxdVdGQnBURlJWU2sxelUwWnNPRm95VlRaMlVqaG9NMng0UW5Gbk5qUXhjako1VFZaYU4yWkZhRWRYV0VONmMwMVZXWEZpQ2twbWJYUmFWVnAyTkhkMlZFcFljMmhCUm05MFdEWlZTME14UlZwdlp6QmtOSFZHT0VJMlV6UjRkVmwwTUcxRFpVOWFiR1ZOWW1RellVZFlRVlZHY1VZS1JpOTBMM1ZtV2tOTWFFcDFlVFk1TlhKVmVVVmpZa3g1VWs4d2VtOXlOVGxaYW01bk0zVjNZVFp6ZHpGdldVTkNkM05rZG1ad1dtdDRjek5pZEVoTVZ3cEhSemR2UTJjNVozcGhXU3M0ZFZkUVVWVlZXVkoyVlM5M1NpdHhaakJaVmxOV1kycExPR2xhYkhCWVRqTjBTMVJXYWxWelFrd3paMjlKTWxVM1FURlNDa2RDVkRCME16Tk1lRTEwWVhFMWRFbDVWemhWZFhscVJHSkhRVVpRYm1ScmRsZHNkbnAxVlRselNISlNSWFp1Ynl0TFVFcE9VREJEUVhkRlFVRmhUa01LVFVWQmQwUm5XVVJXVWpCUVFWRklMMEpCVVVSQlowdHJUVUU0UjBFeFZXUkZkMFZDTDNkUlJrMUJUVUpCWmpoM1NGRlpSRlpTTUU5Q1FsbEZSa2xYUVFwelV5dHlWMFZ5Um5GMldsZE5TbE4wTDFaTGNtTjJZM05OUVRCSFExTnhSMU5KWWpORVVVVkNRM2RWUVVFMFNVSkJVVU5sYkV0dlJXSjJkREl2VFd4UkNtaEtkRFZaYVVSa2RIVmxSMmRtUXpFeU1IVnNhMHRwTDI5cVRIRnNZelUzYlVKT2JUUnpZMHhKT0ZaSVNDOUlPREo2VFVsemNXVlpOa3BsWWsxWFp6RUtNVFZ2VldwcmF6TnpRMHRJYVRoallXRklSVmhNY2xoeFNFb3JiMUpPZGxKTWJpczFlazB3VGs1NVVtOWlaWE5oZUdrNVIySnBTa2xyTUdaMFQyeFNVZ3BKTlRRd1NUSnBVR05TWnpGNVNXZFJabmQ0YnpsSVZGTXJWM05hY3pSRlZHcDVXR2cxVUZab1VURjZOR0prUzFOSlNWVjNhRmxNU1hSNVprOVdOSFJvQ214eFIwNXFWeTlxTkhOcmRHSjBjM0JJU2pWWWVtOWlhekJrWW1jMWFXaHJka1ZSYWsxTlYzVXdjVTlvWkc5NlpHWllNMnB0VjA0NWRuQjZaekp6VEU4S2J6STRRM05wVUdwb1kzbEpUbmhGVDB4TWNFVnpiRmhGVmpVeGJWSkdNSEpEU0U5WVduVTJOazlvV20xT04zUkphVkYyZVROUk5VdE5jRGwzZFVSWmJRb3piMFZKYjNnemNRb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENpMHRMUzB0UWtWSFNVNGdRMFZTVkVsR1NVTkJWRVV0TFMwdExRcE5TVWxFVVVSRFEwRnBhV2RCZDBsQ1FXZEpTVmQ2WW05emFFdENWbUZOZDBSUldVcExiMXBKYUhaalRrRlJSVXhDVVVGM1VHcEZVMDFDUVVkQk1WVkZDa040VFVwaU0wSnNZbTVPYjJGWFdqQk5VMmQzU21kWlJGWlJVVVJGZURseVpGZEtiRXhYUm5kaFdFNXNZMjVhYkdOcE1YTmlNazVvWWtkb2RtTXpVWFFLWXpKc2JtSnRWbmxOUWpSWVJGUkplVTFVUlhsT1ZFRjRUWHBGTVUxR2IxaEVWRTE1VFZSRmVVMXFRWGhOZWtVeFRVWnZkMUJxUlZOTlFrRkhRVEZWUlFwRGVFMUtZak5DYkdKdVRtOWhWMW93VFZObmQwcG5XVVJXVVZGRVJYZzVjbVJYU214TVYwWjNZVmhPYkdOdVdteGphVEZ6WWpKT2FHSkhhSFpqTTFGMENtTXliRzVpYlZaNVRVbEpRa2xxUVU1Q1oydHhhR3RwUnpsM01FSkJVVVZHUVVGUFEwRlJPRUZOU1VsQ1EyZExRMEZSUlVFek4yWnRNRFZ2YkZCclRuUUtOWEV6UlRkeE0zSm5VbEEzY0dWTmJYQnVUMG8zYTFaaE5pOWxWSGhYYm10V1UwTjBjMGRrTTAxaFJuRm9iQ3RXWmswME1TczRkMWhqWTA1MVlVbFJkUW96ZVM5NVpVUlRWM05FZW1aWWNUZEllVWRrWVVSU2IxUjJiM0pJV2xsTGEybFljbGxKVjFCeFFrSndXWEU1UjFSeVJtTlBTRWd2SzB4c1oyWmhORFpVQ2xKcGJUaEtiemcyWTFSdUwxUllhbW93WW1KRE4wRm9UMjhyU2xONFFUQlhNVTU1TmpOa1RDOHJlVlZJY1hJMFRIUnJWMkpFTkdWWWF5OUZiRnBZUkhrS1kyNUdhREpWZWxOd1QyNTZRM1kxYjNaVmVXUk1hMGs0VVZaU1Ntc3hWRVJTYVRCUFprTnJTbHB4YjJacGFrNUdZalY0YzJSdVFWRnNhbmxWZWt0dmVnb3lZMFZwVDNRdmFHNUZhM1IyVGtSTlIwbDZhMmRrU1V0RFpXUllkeXROWkZkeVkwaEZZMkZxY0U1UWFIazVUbWx6ZGt3NGIxRXhNSEZaZEVjNVZTOWhDa2Q1ZURnMWFrTjJlbmRKUkVGUlFVSnZNRWwzVVVSQlQwSm5UbFpJVVRoQ1FXWTRSVUpCVFVOQmNWRjNSSGRaUkZaU01GUkJVVWd2UWtGVmQwRjNSVUlLTDNwQlpFSm5UbFpJVVRSRlJtZFJWVTE1VUhkUWF6aDVZblZzV0ZoSFdtMUpLMFY2Wm5aTE1EZFBjM2RFVVZsS1MyOWFTV2gyWTA1QlVVVk1RbEZCUkFwblowVkNRVWM0YkdWVWRHUlZZM2RGVVdkTE1FTnlhMmhtUTI1NE5UaFJURFZRYUVkTVpscGxiVFJqTlRKb1UyWXZOMjlzUjFNNE0wY3pOMnhZYkUweENrdFZaVTF3YmpVdllVOTJSbmRMWkhWVlZFODFPVXB3WTNkMWExWnNVVFZRSzNkM1QxUmxVM2h2YjJsMlVpdERRVTAyYW5vNFkwVnllRFJvVDNoTVQxRUtSVXBFZFM5b1NGcHlabmhXUkVVNU9HeEdha2hvVkVsNlFVOTNiVnB0VFdaV2JXUndkV2RNUW1SMVF6UlpTblJwUlRaaFlVMXhORlpVZEZKYVpVeEdhd3AwVVVKUldWZGlNWFZpY2toRmNFRkVLMWx3VWtwU2JVOXRXVk41SzFKWE1XZEdhekYxTkhCSGFYbERWRWxVZG10eGJscFVSWHB3ZGtFelJGaFRkVEkxQ2xGWWMwUnNZVGRKTmxkVFZHZG5ZV3RVWjNGdFZXSjZaRE5WZGxKNmVtWmFTMGRCTmsxUE1rcEtiRXhzWnpCSWJYRnpiR2xtV2pkdFVuWnpaMk5CYjBvS1VUTlJlRlp2VGxsdE1VaHlaVzFwT0U5UFJXTnFOWFZrVEhaSlBRb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENpMHRMUzB0UWtWSFNVNGdRMFZTVkVsR1NVTkJWRVV0TFMwdExRcE5TVWxFVkVSRFEwRnFVMmRCZDBsQ1FXZEpTVVEwT0hKRFFXY3ZhVFZ2ZDBSUldVcExiMXBKYUhaalRrRlJSVXhDVVVGM1VrUkZVMDFDUVVkQk1WVkZDa040VFVwaU0wSnNZbTVPYjJGWFdqQk5VelIzVEVGWlJGWlJVVVJGZVZaeVpGZEtiRXhYUm5kaFdFNXNZMjVhYkdOcE1YcGFXRW95WVZkT2JFeFhOV3dLWkVoa2RtTnRjM1JqTW14dVltMVdlVTFDTkZoRVZFbDVUVlJGZVU1VVFYaE5la1V4VFVadldFUlVUWGxOVkVWNVRXcEJlRTE2UlRGTlJtOTNVa1JGVXdwTlFrRkhRVEZWUlVONFRVcGlNMEpzWW01T2IyRlhXakJOVXpSM1RFRlpSRlpSVVVSRmVWWnlaRmRLYkV4WFJuZGhXRTVzWTI1YWJHTnBNWHBhV0VveUNtRlhUbXhNVnpWc1pFaGtkbU50YzNSak1teHVZbTFXZVUxSlNVSkpha0ZPUW1kcmNXaHJhVWM1ZHpCQ1FWRkZSa0ZCVDBOQlVUaEJUVWxKUWtOblMwTUtRVkZGUVRSd2FHZFpNMkYxVUV0blZuQkxMMU15WWpjMU5rODFhbE5DTTFWVlNsSkllbFZqVm14RlZFZE9SVGQwV1RjeVJUTmhlbUYwVDNCT1RFcFJRZ3AxVTFSTVpFZEZaSEEwVVd4Qk0zSk9NWEZHWm1rMFpEaHZOR3gxSzNST09WaDFMMFVyYjBOV1dqUmFjVlZWV1dSSGJFSmFZbVoyTmtWMFlVaENkRzk2Q2pJNVpqQk1aREpSTDFVeE5tbHBkREEyZFRWdU4wZENTbmxUWld4UmVFaDVRVmswZEhSWVMxZGhXSEk0YlVoTFVrNUROMkpzUkhGYU4xUk9abVZVZUhnS09DdHdRM0pzTW1GSUswVm5jamRyYW1kWmVVNURkVEJpZW01dUwwUXpaMnN2VUV0YWRtMWxNbnA2YkZsQ1lURkZUbkJTVXpBNVdHOW5jVFI1T1dVelJnb3JRbTFSTVRnek1rSmthVXBoSzI1dFZqZDBiRE5vY1daelltdG1XRFVyYVdORGVrcFJSa05XWVhJdmFDdHpXVWhhUkhCV2REWnZTVk5uTW1kRVdUVTBDbEV6UmtrclVpdHlLM1YwYm1sVmMzY3lZVVppYUhwRVFrVlJTVVJCVVVGQ2J6QkpkMUZFUVU5Q1owNVdTRkU0UWtGbU9FVkNRVTFEUVhGUmQwUjNXVVFLVmxJd1ZFRlJTQzlDUVZWM1FYZEZRaTk2UVdSQ1owNVdTRkUwUlVablVWVTVabnBYVVVkdlRqVnFkbEZLU0dKUVZsWjZVVVJDZUZoRGNGRjNSRkZaU2dwTGIxcEphSFpqVGtGUlJVeENVVUZFWjJkRlFrRk1ZVlpSVkdsUmFrdEhPVWx0VFRKNldFcEdVVXBwVTFWNFUzVmFRU3N4TlRZMFYxRk9ObnB5YlRsWkNtTlFWRWhQTWxOTGVUTkdZbG8xVnl0d05sVlBRMWx5UzFOdlp6bDRVM0F3TkVkTk9EQTViVVZ4YzI5Wk5XWlBkVGt4V1RVMGRIaEZObTl5VGt4MmNGa0tOVGsyUVROQ01sQnRja05MTlhreWVYbEdOemRCYjBSaU5rWXhOWFJ1UTJsb05qbEhkR2t4SzNZelJrMDJaR1pHVFhoT09UaEtSRmhVY1dSaWFVRnFaQXBVY1Zab1MzbExla2hHVmxGbFJVczBXV0ZMZGtGVVVIQkhSVmRHWkRKSmVVcFlaVVpRTURSakswOTJhRXRrUXpOd1JpOUhSV1JXTVRWUVlXb3dkR0V5Q25kTFFscEpPVlZTVlM5NVNWUnNVRWhGU0RkeGNVaDZTRVF5Ym1ocFRsTlBWRGRJWnpScmRXTTVXRFZuWVVWclNsSlBXVGRaTWxwUFdXRkZlalZWY2prS1pHc3ZaMXB2TlZGdGFucHVOeXQ2Vm5CQlJEWkdWVE5VVVUwMlJHZHVZbUpMYkRSbmMydEpURlZKTUQwS0xTMHRMUzFGVGtRZ1EwVlNWRWxHU1VOQlZFVXRMUzB0TFFvdExTMHRMVUpGUjBsT0lFTkZVbFJKUmtsRFFWUkZMUzB0TFMwS1RVbEpSR3g2UTBOQmJpdG5RWGRKUWtGblNVbFJiVkpIUW5oVGNWQjBZM2RFVVZsS1MyOWFTV2gyWTA1QlVVVk1RbEZCZDFkVVJsaE5SbFZIUVRGVlJRcEJkM2hQWWpOQ2JHSnVUbTloVjFvd1RGZDBNVmx0VlhSWldFSndZekpXZVdSdFZubE1WemwzV2xoS2FHUkhPWGxZTW5oMldUSkdjMkZIT1hwa1F6RjVDbHBYVG5aa2JWWjVaVk14ZWxwWVNqSmhWelZ1VEZoT2NGb3lOV3hqYTBGNFRtcFpOVTE2VVhkT2FtdDNUVUkwV0VSVVNYbE5WRVY1VGxSQmVFNUVVVEVLVFVadldFUlVUWGxOVkVWNVRXcEJlRTVFVVRGTlZtOTNWMVJHV0UxR1ZVZEJNVlZGUVhkNFQySXpRbXhpYms1dllWZGFNRXhYZERGWmJWVjBXVmhDY0Fwak1sWjVaRzFXZVV4WE9YZGFXRXBvWkVjNWVWZ3llSFpaTWtaellVYzVlbVJETVhsYVYwNTJaRzFXZVdWVE1YcGFXRW95WVZjMWJreFlUbkJhTWpWc0NtTnJRWGhPYWxrMVRYcFJkMDVxYTNkTlNVbENTV3BCVGtKbmEzRm9hMmxIT1hjd1FrRlJSVVpCUVU5RFFWRTRRVTFKU1VKRFowdERRVkZGUVhCVFJVc0tkVVpDZEhOTlRVMVRSakV5Y2toRmNHdDNjRVF6T1hOcFNUZHJWa29yYjFZMVpYcE9RVnB5YkVaM05Vb3lkemRCVDFKNmVUWjVVMGt2TVdOMll5dENlQW8yWmlzMFpWVXlhMFp3VEhSQ2JqSnBWa1JqU3k5U1VreGlkVTExZFdvNE5FTTFla05KVTB4eUwxUkZSelJvWVhsWWVDOW5TREkxVEU1bVdrWktObXcxQ2pNeU1qZEhkVzlxUTJOdVVuZGtOVnB6TTBwR1QzVTRVMkZzVTFVNWNUZE5iR1JMUzIxWUt6VkxialoxTVZrM1ZFdFZaRVJ0UVhCR2NXdHpSMkZWY1VvS0wwcHpUMFE1YldaM1IxaFlUamxzUVUxS09WWlFTeXR4Y1ZJNVpGRjBhaTlxYW5aUlJIQk5Ta05sVVc5a2FsVnZiRkV5VXpaVGNGcG9ibXBVY0RSTlR3cEhlRmRUZGt0VU5sVlNkM0p6VFN0MVJYcG5jMGRwVmpreFpIQXlURkJOWTBkS1lYWkJabVF6VTI0MlZrbEZVV1pzYkRZM2RFcHhlV0kxUlRsNmFUTkZDbWh6VkRsbksxQm1WbTlDU0c1b04wSjFkMGxFUVZGQlFtOHlUWGRaVkVGUFFtZE9Wa2hST0VKQlpqaEZRa0ZOUTBGeFVYZEVkMWxFVmxJd1ZFRlJTQzhLUWtGVmQwRjNSVUl2ZWtGa1FtZE9Wa2hSTkVWR1oxRlZNR2h3UWpOamJYTkZLMnhTVkdaQ1owVjFXVXhvUWtGRFlUQlpkMGgzV1VSV1VqQnFRa0puZHdwR2IwRlZNR2h3UWpOamJYTkZLMnhTVkdaQ1owVjFXVXhvUWtGRFlUQlpkMFJSV1VwTGIxcEphSFpqVGtGUlJVeENVVUZFWjJkRlFrRkNLMUJMYlVnMUNtSnlkMk5LZGpWSFIwNUdNM0ozUldGR2Rtc3hNR2haWlV0blRtNTFhVWR3U0VKSVVsUnBPR1ZvZUZWeWRXa3pSVEJuTjJ0RVNsaEVSMXBJWXpKT1pEY0tURVZMZFRGNUsxSjBSbGt2SzJkWU9HcGlSakZ4Vm05YWIweGFaVGxYVDJOS2VUWmFlV0V2Y0VwM2FFNUZaR2N2V2pSM1pIbHJZMUpvVEVwWFlUQktid3BPUWsxbU5FVTRNVWhDTVhZdlZGaFBjRVYxYUd4QmVGUjFiWHBPWlc5cE5UVnRSbXh4WlZWNlJrOTJPVE5SUlZSdWFXbHNhV05rZHpWSlRVcFljaXRCQ25OaE4xVk9UMkpWZDBGcWJXODFXRlF3UkdNcmFIWTBiRGxyZUN0TFIyMVhUMDFZYmxwalRIVjJVamcxVHpOa1NURnhabXBNUjFOM1QwbENVRmQ1VG0wS2MzYzNjWE5WYjNreFQwdFFVV0oxVkVZelIzcGhZVW8xWlUxclNFMWFNV05wT0daRFl6UTFZMmtyU0VzdllrTkxSM1lyVW1wb1VEZG5TMk5vZFhaUFN3cEpSbUpDYUdWRmFrZFdlVFF6UWtVOUNpMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwS0xTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVJtZWtORFFXMWxaMEYzU1VKQlowbEpVR1JIV2xZMU9WWjFMekIzUkZGWlNrdHZXa2xvZG1OT1FWRkZURUpSUVhkS2FrVnJUVU5KUjBFeFZVVUtRWGQzWW1GWE5XNWpiVlo2WTNreGRtTkhWbmxaV0ZKMlkydEJlRTVxV1RWTmVsRjNUbnBaTWsxQ05GaEVWRWw1VFZSRmVVNVVRWGhPUkZsM1RteHZXQXBFVkVrd1RWUkZlVTVFUVhoT1JGbDNUakZ2ZDB4NlJYUk5RM05IUVRGVlJVRjNkMnRMYVRWb1kwaENla3h0YURGWmFtczBURzVPYUdKdFVtbGlNMmQ0Q2s5RVdUTk1iVGwzV2xjMU1HSkhUWFZaTWpsMFRVbEpRa2xxUVU1Q1oydHhhR3RwUnpsM01FSkJVVVZHUVVGUFEwRlJPRUZOU1VsQ1EyZExRMEZSUlVFS01Ia3ZaSGs0V0doeldERnVNMWxQTWtRelMzSm9kRXN2Um1wb1NHMVRPVm93YWxOclpXNVBRV2hsYTJwRE9YQmtXVmdyU1RCbFZITXdlRFE1VFdoRFRRcGlZVGxZU1ZNMGVXOU5ORFp4VFRaM09ISkdTVzVGT0dsc2RrdDFTWEJrTjBock5sUlBSak52VVdWcFFXbExVbVV2UkhGRVpHVTBlbUlyTVZrMloxZFhDakJ0WkU5Q2NHMVFiaXMwZEhkdlVrY3ZUVFJDU1ZoS01sTklja1ptTldwVmQxUlZUV1JKZUhRelkzbzVaM1ZtWmxsdVFpczJRMUZCZDJNNE5DdDJMMFlLWkZCM1NVMTJPSGR6Y0ZSeFlVWjBLM1JvWkVGNGVHNWtkMmR6WXpOalNWWnpORk5JWm5wNVNXOWhUR1oxVDFOeFRHMW5USFpTY25GdWJXc3pMMFptTkFwT1VVUXdVMFpQWVdWM2FuVmFaV0Z4V1ZveldXeFNVRlIyU0VndlMySnhlakZrTDJVeFIzaGxibHB3Tm5SSU9UQkJZbkJYYkhoalMxRjJSVlY1V0dFeENuVm1hSGwxUVRoV1p5OWtjMk5YT1dsUk1UZE5lSGRKUkVGUlFVSnZORWR1VFVsSGEwMUJORWRCTVZWa1JIZEZRaTkzVVVWQmQwbEdiMFJCVkVKblRsWUtTRk5WUlVSRVFVdENaMmR5UW1kRlJrSlJZMFJCVkVGTlFtZE9Wa2hTVFVKQlpqaEZRV3BCUVUxQ01FZEJNVlZrUkdkUlYwSkNVblV5Wm1aaGFYUnJTd3BCZFZnNVkzWlhaMUZoV2xOdU1XWmtRVVJCWmtKblRsWklVMDFGUjBSQlYyZENVbVZKTUhCc09IVllkSGh5SzJreWFqQXZVazVKUmpSMkszbERWRUYyQ2tKblRsWklVa1ZGUzBSQmJXZHBVWEZNYlVaM1kwaE5kV0ZJVm1sUFZHZDFZekpHZFZwSFNuWmxSRVUwVG1wamRXSXpRbXhpYmxKeldYazFhbUl5TUhjS1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFVUm5aMFZDUVVKaGRIVmpZblZ1VG01VFJVZEJUM1ppYVcwMFNuWkVTMEp1YzBFMGFqSkZlRWRHZVdVdlRBcDFaRXhQUTNKaGRFeGFUMk5QYTA4MlVraDNVRFpDVmpGd2NHZHhZVEp2WVhnMWJHeFVVVWRaUVV4cVpUWlNja0Z2VUVscFNsazRjRU5EWVhCWldqWlhDa2RGY1dvMWJXRnVkekJUVWtObGFEQnhja0Y1UkM4clMzZDJSbk5XVmxBMFRYZG1lVkZWUjBONkwwMTZURmx4VGpBMmVrMTFjM0p6U1hCVGRqSm1aekFLU1hObVMzRTNkWHBYVkhGdmNURlhMemsyZVN0Nk1Hc3lWM3AxVEV4R1RURTJlRzV1VjI1UGFIbE1PRzExYjIxaVlXZ3ZhVE53UWtSSVEzWjFkWEJvTmdwcFVWWnlSa1ZJU0ZCTllubzRSamRMYm0xbVJsSlFVRFZaWkUxMWNVNDJVV3hUVkRkbFdVaFNhVGxFYlZZd0wxSmpTVTV0WjBkSWJUUjBaV2MyTlN0SUNsTkdOa1IwWTJWV01FMDRZVkJNYWxOV1Zrc3ljbFJSVWtGRFVqTkxjalJKUkZoQ1JFNURkVWhMVmtSRFpTOW5QUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDaTB0TFMwdFFrVkhTVTRnUTBWU1ZFbEdTVU5CVkVVdExTMHRMUXBOU1VsRVJFUkRRMEZtVTJkQmQwbENRV2RKUWtGVVFVNUNaMnR4YUd0cFJ6bDNNRUpCVVhOR1FVUkJiVTFUVVhkSloxbEVWbEZSUkVSQ2RIQmliV1I1Q2xwWVRucE1WemwzV2xoS2FHUkhPWGxSUkVVeVRtcHJlazVFUVROT2FsbDNTR2hqVGsxcVNYaE5WRWt4VFVSRk1FNXFRVEZYYUdOT1RXcFJlRTFVU1RBS1RVUkZNRTVxUVRKWGFrRnRUVk5SZDBsbldVUldVVkZFUkVKMGNHSnRaSGxhV0U1NlRGYzVkMXBZU21oa1J6bDVVVVJGTWs1cWEzcE9SRUV6VG1wWmR3cG5aMFZwVFVFd1IwTlRjVWRUU1dJelJGRkZRa0ZSVlVGQk5FbENSSGRCZDJkblJVdEJiMGxDUVZGRVZGaE9Uak4zTTNscVJIaGhTWFpKTjJSUE5VeHlDbGg1ZFhSREx6TlBNRGg0VDFwRk56WjNRbkpoWVRGS1drVjFMM1o1YkRkRFZuSkRZbGxPVEhZdlJHNVJVR0k0VnpaNmRFRklkbTkwUVRkSFNGZHhTbmtLT1haS1dIWk1kVXRHVkV0MFl6QTRVVFZaVWs1a0szRlVhSEJ6U25aWGNsQXdOWFJGT1ZoUFpXNHhTMmhJYTJKeUswWmpkR2RuYkhZd1RHRktXbmRGWlFvclEzUmlUSFJ3ZDBSS09YYzJUbXhxV0hKTE4wSllTMEk1VTFOemJVczVPVVIyTkZGdU9GYzJZMkUxYjFoamVGaHRaRWxJYkU1aUwyZFVhaXRTYVV0MUNuUlliRGhLUm5waVVrcE5UR3BtV21NclJFaHhVVVFyV1dKaE4yRndhVGRGY0ZRMVVFZERaVzlLYjBSWGMyRjVRMmMxYXpNNGFrMVlLemhoZVV4VGVrWUtPSGRpYkVSVlRuVnpUVmhUVGxrek5HVm1ia1ZyUlVSQlExVlJiMlJ0Ymtwc0x6SlphazExWVhoQ2JYTnVjemgwY0daSE1VdG9ieTlPWVZkeFZHOHZWZ3BCWjAxQ1FVRkhhbEpVUWtSTlFUUkhRVEZWWkVSM1JVSXZkMUZGUVhkSlEzQkVRVk5DWjA1V1NGSk5Ra0ZtT0VWRFJFRkhRVkZJTDBGblJVRk5RakJIQ2tFeFZXUkVaMUZYUWtKU1pVa3djR3c0ZFZoMGVISXJhVEpxTUM5U1RrbEdOSFlyZVVOVVFVNUNaMnR4YUd0cFJ6bDNNRUpCVVhOR1FVRlBRMEZSUlVFS1dWbG9WU3QxTlZsa2NFUlBRMFpRTm5GYWF6WndTR0l3Wm1WdlduSk9kUzlDY2l0dlZEZENjVUZaWm1kbVV6aExkRzVvUTJac1ptRTFkbWg2VUdKQ1p3cDBjakphV2xSTE1tRkJZbGxGYm5wdldqRnhZMmxwVkdadVRVMXJjM2wyTjI5V1ptNW9XbkZWWWpReVZtbEpSMmswTHpOSE9UQXpZVzlTWWxabVVqZHlDakprYjFKdGFXWk1XRWgyVXpkTVNFeEdaRkF2VlRGWWN6aGhlbTV3YzI5VGJXUllOMDlwUkhJek1sZEVZVmR6VFdSWmRFRTVWaTlyTlVaMlJtTTJkMFVLVVhkV2QycFZlUzg1YzJOdE1ITnFka1ZpYldJd1FsZFJaMVZsZDNCUlpEbDZjMWRUUTJZeVpGZzRia2RQWkRGNFZIZGFNSFl3TlZob1NuQnRXV2xQUndwcWFXaFZWMlZIUVZReGNtMVNiSEppVW1Ga1RHOTVjbkJoVEdWaWNVbHFUa0ZaTVRWbE5GQjRRbUZ0WW14bGNVNVNPRlpNS3paNldHdDJXbFZNWmxkNkNqZzJLMmwzVWpWdE1sWjBUazlSVWtzMldtSk5WM2M5UFFvdExTMHRMVVZPUkNCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2c9PQogICAgc2VydmVyOiBodHRwczovL2FwaS5odWI5OC5zYW5kYm94MTg2Ny5vcGVudGxjLmNvbTo2NDQzCiAgbmFtZTogZGVmYXVsdC1jbHVzdGVyCmNvbnRleHRzOgotIGNvbnRleHQ6CiAgICBjbHVzdGVyOiBkZWZhdWx0LWNsdXN0ZXIKICAgIG5hbWVzcGFjZTogZGVmYXVsdAogICAgdXNlcjogZGVmYXVsdC1hdXRoCiAgbmFtZTogZGVmYXVsdC1jb250ZXh0CmN1cnJlbnQtY29udGV4dDogZGVmYXVsdC1jb250ZXh0CmtpbmQ6IENvbmZpZwpwcmVmZXJlbmNlczoge30KdXNlcnM6Ci0gbmFtZTogZGVmYXVsdC1hdXRoCiAgdXNlcjoKICAgIHRva2VuOiBleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SW01a2FsSm1TVEZZV0VGcVMzZzVlR2R0UVZWeU4wWkhjbUYyVjJWUmFYbEJiVUZyWTNsTVVYbDVhVkVpZlEuZXlKaGRXUWlPbHNpYUhSMGNITTZMeTlyZFdKbGNtNWxkR1Z6TG1SbFptRjFiSFF1YzNaaklsMHNJbVY0Y0NJNk1UY3dNRFV6T0RVNU1Td2lhV0YwSWpveE5qWTVORE0wTlRreExDSnBjM01pT2lKb2RIUndjem92TDJ0MVltVnlibVYwWlhNdVpHVm1ZWFZzZEM1emRtTWlMQ0pyZFdKbGNtNWxkR1Z6TG1sdklqcDdJbTVoYldWemNHRmpaU0k2SW1kbU5XMWtJaXdpYzJWeWRtbGpaV0ZqWTI5MWJuUWlPbnNpYm1GdFpTSTZJbWRtTlcxa0xXSnZiM1J6ZEhKaGNDMXpZU0lzSW5WcFpDSTZJalk1TmpJMk0ySmhMVEppWlRRdE5HVTFaQzA1TmpZM0xUWm1aR1EyWlRWa05tVmhPQ0o5ZlN3aWJtSm1Jam94TmpZNU5ETTBOVGt4TENKemRXSWlPaUp6ZVhOMFpXMDZjMlZ5ZG1salpXRmpZMjkxYm5RNloyWTFiV1E2WjJZMWJXUXRZbTl2ZEhOMGNtRndMWE5oSW4wLkZPNnRkRDZjVHhYS09TYW45Mmt5Q0hFMUdycURvOUVaU1dCYmdwSWQtWldJSVAwVU1fZC1OejQxT0xybmVuUE95d21MSlI4MlhBUXdiMnhJeVFDMG94YVBZS1c4aGJBY0ZLMG9VQ2pBN0tmanQ2M3JXT3QzaHd0YnZBRUY4dk9tOTJNRlBLVEpmNy0xVHRwaTZTTERxZFdyVGlQcUdGUnZnUS1PUUo2SGNtV2hnc192SnBDc2xpdUNwZGkyNU90cnRfNUUxUTRkWWZZOUdPVHVQbFp2Rk5jaVlXelBfcHNGN0JHclJvU0NaZVdsUUtmUC1fNzh3VDFZX2tsSTZ1X1NiWU54Z1VHWmhVZ2UxU1o5V3dTNVFGWGlaeFFHbk1sSTBBTFVwN2x3RTNvdlcxSlJvWGR2S1pPNEU1YURiQk11bmdzbjRKbFM2OUx3ODBWUmlQekRYQjhHNDVMNWZYeTVMUVAtaG9aS3FYSnl3OUMzWWdjZFpLNUlWRGRnU2YyWDN0d3gzVm5wRHpYckVRQ2duRm8zTjlQMW1tQUx3RGZlcFVrTUNCTU14MlNxSmhvLVZjODQzSnhCQU5FUWs3eEpzOFFvN0pSZEpYTHRSb3FucW1zT1g2UkdhR0ZMWUZFdjkzWXZsenU0TUxyYWRuNjljeEtxVmtHbGhXZ1plU3B2TEZtOWt2ZHMwZzYwS3lKQnJQZE8wOWRXcm83NHhJTGVTZW9RQ2lkREhPQWtyWXE4VU9sT253bmJWNjdma05JaV9oR01sUGxxd0NpZmhYX1FhZERjLWM3MVhpblg2bkdqaks2OXNSdUlsQXpBdGJwb1hxWTNGb0wyUVhHa19XVXlkYkpFbDRsanlDRDRZTVhxY1FHRXFHcG1GN0tWSUpUSGc1cVR6UUEtaGhZCg=="

---
apiVersion: operator.open-cluster-management.io/v1
kind: Klusterlet
metadata:
  name: klusterlet
spec:
  deployOption:
    mode: Default
  registrationImagePullSpec: "registry.redhat.io/multicluster-engine/registration-rhel8@sha256:ff806e9f366418fc9e0bd5831df1eced6aa3d933d10bf4f0641ae8350c6bfb80"
  workImagePullSpec: "registry.redhat.io/multicluster-engine/work-rhel8@sha256:92c584ef121c16fb1241ff8309b656dd24075570762f6ebc037a223acd38e399"
  clusterName: "gf5md"
  namespace: "open-cluster-management-agent"
  nodePlacement:
    tolerations:
    - key: "node-role.kubernetes.io/infra"
      value: ""
      effect: "NoSchedule"
      operator: "Exists"
" | base64 -d | kubectl apply -f - || echo "VGhlIGNsdXN0ZXIgY2Fubm90IGJlIGltcG9ydGVkIGJlY2F1c2UgaXRzIEtsdXN0ZXJsZXQgQ1JEIGFscmVhZHkgZXhpc3RzLgpFaXRoZXIgdGhlIGNsdXN0ZXIgd2FzIGFscmVhZHkgaW1wb3J0ZWQsIG9yIGl0IHdhcyBub3QgZGV0YWNoZWQgY29tcGxldGVseSBkdXJpbmcgYSBwcmV2aW91cyBkZXRhY2ggcHJvY2Vzcy4KRGV0YWNoIHRoZSBleGlzdGluZyBjbHVzdGVyIGJlZm9yZSB0cnlpbmcgdGhlIGltcG9ydCBhZ2Fpbi4=" | base64 -d
